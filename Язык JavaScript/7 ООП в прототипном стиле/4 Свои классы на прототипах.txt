ОБЫЧНЫЙ КОНСТРУКТОР

function Animal(name) {
  this.speed = 0;
  this.name = name;

  this.run = function(speed) {
    this.speed += speed;
    alert( this.name + ' бежит, скорость ' + this.speed );
  };

  this.stop = function() {
    this.speed = 0;
    alert( this.name + ' стоит' );
  };
};

var animal = new Animal('Зверь');

alert( animal.speed ); // 0, начальная скорость
animal.run(3); // Зверь бежит, скорость 3
animal.run(10); // Зверь бежит, скорость 13
animal.stop(); // Зверь стоит
//////////////////////////////////////////////////////////////////////
КЛАСС ЧЕРЕЗ ПРОТОТИП

Для объявления класса:
1 Объявить функцию-конструктор
2 Записать методы и свойства, необходимые ВСЕМ объектам класса, в prototype

// конструктор
function Animal(name) {
  this.name = name;
  this.speed = 0;
}

// методы в прототипе
Animal.prototype.run = function(speed) {
  this.speed += speed;
  alert( this.name + ' бежит, скорость ' + this.speed );
};

Animal.prototype.stop = function() {
  this.speed = 0;
  alert( this.name + ' стоит' );
};

var animal = new Animal('Зверь');

alert( animal.speed ); // 0, свойство взято из прототипа
animal.run(5); // Зверь бежит, скорость 5
animal.run(5); // Зверь бежит, скорость 10
animal.stop(); // Зверь стоит

В ОБЪЕКТЕ animal хранятся СВОЙСТВА КОНКРЕТНОГО ЭКЗЕМПЛЯРА.
В ПРОТОТИПЕ - ОБЩИЕ МЕТОДЫ.

//////////////////////////////////////////////////////////////////////
СРАВНЕНИЕ

++ ДОСТОИНСТВА ++

ФУНКЦИОНАЛЬНЫЙ стиль записывает в каждый объект И СВОЙСТВА И МЕТОДЫ, а ПРОТОТИПНЫЙ – только СВОЙСТВА. 
Поэтому прототипный стиль – быстрее и экоомнее по памяти.

-- НЕДОСТАТКИ --

При создании методов через прототип, мы ТЕРЯЕМ возможность использовать ЛОКАЛЬНЫЕ переменные как ПРИВАТНЫЕ СВОЙСТВА, у них больше НЕТ общей области видимости с конструктором.

Таким образом, прототипный стиль – быстрее и экономнее, но немного менее удобен.

///////////////////////////////////////////////////////////////////////
ПРИМЕР:

++ ФУНКЦИОНАЛЬНЫЙ СТИЛЬ ООП ++ 

function Animal(name) {
  this.sayHi = function() {
    alert( name );
  };
}

var animal = new Animal("Зверь");
animal.sayHi(); // Зверь

++ ПРОТОТИПНЫЙ СТИЛЬ ООП ++

Все методы находятся ВНЕ конструктора.

function Animal(name) {
	this._name = name;
}

Animal.prototype.sayHi = function() {
	alert(this._name);
}

var animal = new Animal("Зверь");
animal.sayHi();