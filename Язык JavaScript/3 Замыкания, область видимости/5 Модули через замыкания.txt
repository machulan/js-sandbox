ПРИЕМ ПРОЕКТИРОВАНИЯ "МОДУЛЬ"

(function() {
	код модуля
})();


(function() {

  // глобальная переменная нашего скрипта
  var message = "Привет";

  // функция для вывода этой переменной
  function showMessage() {
    alert( message );
  }

  // выводим сообщение
  showMessage();

})();

////////////////////////////////////////////////////////////////////
СКОБКИ:
«на месте» разрешено вызывать только Function Expression
1 Если браузер видит function в основном потоке кода – он считает, что это Function Declaration.
2 Если же function идёт в составе более сложного выражения, то он считает, что это Function Expression.

+function() {
  alert('Вызов на месте');
}();

!function() {
  alert('Так тоже будет работать');
}();

////////////////////////////////////////////////////////////////////
ЭКСПОРТ ЗНАЧЕНИЯ

;(function() {

  // lodash - основная функция для библиотеки
  function lodash(value) {
    // ...
  }

  // вспомогательная переменная
  var version = '2.4.1';
  // ... другие вспомогательные переменные и функции

  // код функции size, пока что доступен только внутри
  function size(collection) {
    return Object.keys(collection).length;
  }

  // присвоим в lodash size и другие функции, которые нужно вынести из модуля
  lodash.size = size
  // lodash.defaults = ...
  // lodash.cloneDeep = ...

  // "экспортировать" lodash наружу из модуля
  window._ = lodash; // в оригинальном коде здесь сложнее, но смысл тот же

}());


; - "защита от дураков"
////////////////////////////////////////////////////////////////////
ЭКСПОРТ ЧЕРЕЗ return

var lodash = (function() {

  var version;
  function assignDefaults() { ... }

  return {
    defaults: function() {  }
  }

})();