МЕТОДЫ У ОБЪЕКТОВ

var user = {
  name: 'Василий',
  // метод
  sayHi: function() {
    alert( 'Привет!' );
  }
};

ИЛИ

user.sayHi = function() { // присвоили метод после создания объекта
  alert('Привет!');
};

user.sayHi();

////////////////////////////////////////////////////////////////////////
ДОСТУП К ОБЪЕКТУ ЧЕРЕЗ this

Для доступа к текущему объекту из метода используется ключевое слово this.

var user = {
  name: 'Василий',

  sayHi: function() {
    alert( this.name );
  }
};
user.sayHi(); // sayHi в контексте user

////////////////////////////////////////////////////////////////////////
ПОДРОБНЕЕ ПРО this

Значение this называется КОНТЕКСТОМ ВЫЗОВА и будет определено в момент вызова функции.

function sayHi() {
  alert( this.firstName );
} // допустимая функция

Если одну и ту же функцию запускать в контексте разных объектов, она будет получать разный this:

var user = { firstName: "Вася" };
var admin = { firstName: "Админ" };

function func() {
  alert( this.firstName );
}

user.f = func;
admin.g = func;


// this равен объекту перед точкой:
user.f(); // Вася
admin.g(); // Админ

////////////////////////////////////////////////////////////////
ЗНАЧЕНИЕ this ПРИ ВЫЗОВЕ БЕЗ КОНТЕКСТА

++ СТАРЫЙ СТАНДАРТ ++
function func() {
  alert( this ); // выведет [object Window] или [object global]
}

func();

++ USE STRICT ++
// выведет undefined

////////////////////////////////////////////////////////////////////////
ССЫЛОЧНЫЙ ТИП

Контекст this никак не привязан к функции, даже если она создана в объявлении объекта. Чтобы this передался, нужно вызвать функцию именно через точку (или квадратные скобки).

Поэтому любая операция над результатом операции получения свойства, кроме вызова, приводит к потере контекста.

Причина кроется в деталях работы вызова obj.method().
Точка возвращает не функцию, а значение специального «ссылочного» типа Reference Type.
Этот тип представляет собой связку «base-name-strict», где:
base – как раз объект,
name – имя свойства,
strict – вспомогательный флаг для передачи use strict.

Скобки () получают из base значение свойства name и вызывают в контексте base.
Другие операторы получают из base значение свойства name и используют, а остальные компоненты игнорируют.