Методы и свойства, которые не привязаны к конкретному экземпляру объекта, называют «статическими». Их записывают прямо в саму функцию-конструктор.

//////////////////////////////////////////////////////////////////
СТАТИЧЕСКИЕ СВОЙСТВА

function Article() {
  Article.count++;
}

Article.count = 0; // статическое свойство-переменная
Article.DEFAULT_FORMAT = "html"; // статическое свойство-константа

//////////////////////////////////////////////////////////////////
СТАТИЧЕСКИЕ МЕТОДЫ

Article.showCount = function() {
  alert( this.count ); // (1)
}

new Article();
Article.showCount(); // (2)

///////////////////////////////////////////////////////////////////
ПРИМЕР - СРАВНЕНИЕ ОБЪЕКТОВ

function Journal(date) {
  this.date = date;
  // ...
}
// возвращает значение, большее 0, если A больше B, иначе меньшее 0
Journal.compare = function(journalA, journalB) {
  return journalA.date - journalB.date;
};

// использование компаратора

Статический метод также можно использовать для функций, которые вообще не требуют наличия объекта.

///////////////////////////////////////////////////////////////////
ФАБРИЧНЫЕ МЕТОДЫ

«Фабричный статический метод» – удобная альтернатива такому конструктору. Так называется статический метод, который служит для создания новых объектов (поэтому и называется «фабричным»).

// конструктор
function User() {
  this.sayHi = function() {
    alert(this.name)
  };
}

// статический метод createAnonymous без аргументов
User.createAnonymous = function() {
  var user = new User;
  user.name = 'Аноним';
  return user;
}

// статический метод createFromData с аргументом
User.createFromData = function(userData) {
  var user = new User;
  user.name = userData.name;
  user.age = userData.age;
  return user;
}

++ Преимущества использования фабричных методов: ++

1 Лучшая читаемость кода. Как конструктора – вместо одной большой функции несколько маленьких, так и вызывающего кода – явно видно, что именно создаётся.

2 Лучший контроль ошибок, т.к. если в createFromData ничего не передали, то будет ошибка, а полиморфный конструктор создал бы анонимного посетителя.

3 Удобная расширяемость. Например, нужно добавить создание администратора, без аргументов. Фабричный метод сделать легко: User.createAdmin = function() { ... }. А для полиморфного конструктора вызов без аргумента создаст анонима, так что нужно добавить параметр – «тип посетителя» и усложнить этим код.

Поэтому полиморфные конструкторы лучше использовать там, где нужен именно полиморфизм, т.е. когда непонятно, какого типа аргумент передадут, и хочется в одном конструкторе охватить все варианты.

А в остальных случаях отличная альтернатива – фабричные методы.