КРАТКО

Для произвольной функции Person верно:
1 Прототип __proto__ новых объектов, создаваемых через new Person, можно задавать при помощи свойства Person.prototype.

2 Значением Person.prototype по умолчанию является объект с единственным свойством constructor, содержащим ссылку на Person. Его можно использовать, чтобы из самого объекта получить функцию, которая его создала. Однако, JavaScript никак не поддерживает корректность этого свойства, поэтому программист может его изменить или удалить.

3 Современный метод Object.create(proto) можно эмулировать при помощи prototype, если хочется, чтобы он работал в IE8-.

////////////////////////////////////////////////////////////////////////
СВОЙСТВО F.prototype

СПОСОБ 1 (не работает в IE10-):

var animal = {
  eats: true
};

function Rabbit(name) {
  this.name = name;
  this.__proto__ = animal;
}

СПОСОБ 2 (КРОССБРАУЗЕРНЫЙ):

Чтобы новым объектам автоматически ставить прототип, конструктору ставится свойство prototype.

При создании объекта через new, в его прототип __proto__ записывается ссылка из prototype функции-конструктора.

function Rabbit(name) {
  this.name = name;
}

Rabbit.prototype = animal;

var rabbit = new Rabbit('Крроль') // rabbit.__proto__ = animal
alert( rabbit.eats ); // true

//////////////////////////////////////////////////////////////////////
СВОЙСТВО prototype ИМЕЕТ СМЫСЛ ТОЛЬКО У КОНСТРУКТОРА

ЕГО ЕДИНСТВЕННОЕ НАЗНАЧЕНИЕ - УКАЗЫВАТЬ __proto__ ДЛЯ НОВЫХ ОБЪЕКТОВ.

ЗНАЧЕНИЕМ prototype МОЖЕТ БЫТЬ ТОЛЬКО ОБЪЕКТ.

//////////////////////////////////////////////////////////////////////
СВОЙСТВО constructor

У каждой функции по умолчанию уже есть свойство prototype.

function Rabbit() {}

Rabbit.prototype = {
  constructor: Rabbit
};

ИСПОЛЬЗОВАНИЕ:
var rabbit = new Rabbit("Кроль");
var rabbit2 = new rabbit.constructor("Крольчиха");

ПОЛЕЗНО, когда неизвестно, какой был конструктор у объекта.

Свойство constructor легко потерять.

////////////////////////////////////////////////////////////////
ЭМУЛЯЦИЯ Object.create() ДЛЯ IE8-

function inherit(proto) {
  function F() {}
  F.prototype = proto;
  var object = new F;
  return object;
}

inherit(animal) ИДЕНТИЧНО Object.create(animal).
