КРАТКО 

1 В JavaScript есть встроенное «наследование» между объектами при помощи специального свойства __proto__.

2 При установке свойства rabbit.__proto__ = animal говорят, что объект animal будет «прототипом» rabbit.

3 При чтении свойства из объекта, если его в нём нет, оно ищется в __proto__. Прототип задействуется только при чтении свойства. Операции присвоения obj.prop = или удаления delete obj.prop совершаются всегда над самим объектом obj.

Объекты в JavaScript можно организовать в цепочки так, чтобы свойство, не найденное в одном объекте, автоматически искалось бы в другом.

//////////////////////////////////////////////////////////////////
ПРОТОТИП proto

var animal = {
  eats: true
};
var rabbit = {
  jumps: true
};

rabbit.__proto__ = animal;

// в rabbit можно найти оба свойства
alert( rabbit.jumps ); // true
alert( rabbit.eats ); // true

ПРОТОТИП - ОБЪЕКТ, НА КОТОРЫЙ УКАЗЫВАЕТ ССЫЛКА __proto__.
animal - прототип для rabbit.

rabbit ПРОТОТИПНО НАСЛЕДУЕТ ОТ animal.

ПРОТОТИП – это «резервное хранилище свойств и методов» объекта, автоматически используемое при поиске.

//////////////////////////////////////////////////////////////////
МЕТОД hasOwnProperty

Обычный цикл for..in не делает различия между свойствами объекта и его прототипа.

obj.hasOwnProperty(prop) 
возвращает true, если свойство prop принадлежит самому объекту obj, иначе false.

alert( rabbit.hasOwnProperty('jumps') ); true

//////////////////////////////////////////////////////////////////
Object.create(null)

var obj = Object.create(null) // obj не имеет прототипа

var data = {};
При поиске свойств в data можно найти и встроенные функции, например, data.toString.

ОДНО ИЗ РЕШЕНИЙ:
// выведет toString только если оно записано в сам объект
alert(data.hasOwnProperty('toString') ? data.toString : undefined);

ОДНАКО ЕСТЬ ПУТЬ ПРОЩЕ:
var data = Object.create(null);
data.text = "Привет";
alert(data.text); // Привет
alert(data.toString); // undefined

//////////////////////////////////////////////////////////////////
МЕТОДЫ ДЛЯ РАБОТЫ С __proto__

ЧТЕНИЕ:
Object.getPrototype(obj) => Возвращает obj.__proto__

ЗАПИСЬ:
Object.setPrototypeOf(obj, proto) // Устанавливает obj.__proto__ = proto

СОЗДАНИЕ ОБЪЕКТА С ПРОТОТИПОМ: 
Object.create(proto, descriptors)
// Создаёт пустой объект с __proto__, равным первому аргументу, второй необязательный аргумент может содержать дескрипторы свойств.
